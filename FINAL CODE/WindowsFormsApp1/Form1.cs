using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;


namespace WindowsFormsApp1
{

    public partial class Form1 : Form
    {
        public HashSet<string> Dictwords = new HashSet<string>();
        public HashSet<string> outputList = new HashSet<string>();
        public List<Tuple<int, string>> outputwords = new List<Tuple<int, string>>();

        char SelectedChar;
        int  SelectedOption;
        
        public Form1()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            var words = File.ReadAllLines("words.dic");
            foreach (var word in words)
            {
                Dictwords.Add(word.ToUpperInvariant());
            }

            comboBox1.Hide();
            comboBox2.Hide();
            comboBox3.Hide();

//            listView1.Columns.Add("Length", 300);
//            listView1.Columns.Add("Word", 300);

            listView1.View = View.Details;
            listView1.ShowItemToolTips = true;
            listView1.FullRowSelect = true;

        }

        private void textBox1_KeyDown(object sender, KeyEventArgs e)
        {
            //string scrambledWord = textBox1.Text;

            //if (e.KeyCode == Keys.Enter)
            //{
            //    label4.Text = "";

            //    GeneratePermutations(scrambledWord);

            //}

        }

        public void GeneratePermutations(string scrambledWord)
        {
            char[] listchars = scrambledWord.ToCharArray();
            int y = listchars.Length - 1;
            GeneratePermFixedLength(listchars, 0, y);

            if (scrambledWord.Length == 1) return;

            string nextSmallWord;
            for (int m = 0; m < scrambledWord.Length; m++)
            {
                nextSmallWord = scrambledWord.Substring(0, m) + scrambledWord.Substring(m + 1);
                GeneratePermutations(nextSmallWord);
            }

        }
        // This Generates the Permutations for a given length

        private void GeneratePermFixedLength(char[] list, int k, int m)
        {
            if (k == m)
            {
                var text = new string(list);

                if (Dictwords.Contains(text.ToUpperInvariant()))
                {
                    if (!outputList.Contains(text))
                    {
                        //label4.Text = label4.Text + text.Length + " - " + text + "\n";
                        outputList.Add(text);
                        outputwords.Add(new Tuple<int, string>(text.Length, text));
                    }
                }
            }
            else
                for (int i = k; i <= m; i++)
                {
                    Swap(ref list[k], ref list[i]);
                    GeneratePermFixedLength(list, k + 1, m);
                    Swap(ref list[k], ref list[i]);
                // First it swaps first and last chars, then it swaps second and last char, and then third and last and so on
                }
        }
        // This method is a recursive program which calls it self, once a combination is generated it is printed.
        private void Swap(ref char a, ref char b)
        {
            if (a == b) return;

            var temp = a;
            a = b;
            b = temp;
        }
        // Each permutation is generated by swapping two characters at a time.
        private void label1_TextChanged(object sender, EventArgs e)
        {
            label4.Height = label4.Height + 10;
        }
        // This doesn't matter much as I added a scrollbar
        private void textBox1_TextChanged(object sender, EventArgs e)
        {

          
            string textBoxWords = textBox1.Text;
            comboBox1.DataSource = textBoxWords.ToCharArray();
            comboBox2.DataSource = textBoxWords.ToCharArray();
            comboBox3.DataSource = textBoxWords.ToCharArray();
            
        }
        // When something is typed into the textbox the letters are then copied into the combo box ( drop down thingy )
        private void comboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            SelectedChar = (char)comboBox1.SelectedItem;
        }
        // When you click on the radio button it also selects the letter in the combobox (the first one only)
        private void radioButton1_CheckedChanged(object sender, EventArgs e)
        {
            comboBox1.Hide();
            comboBox2.Hide();
            comboBox3.Hide();
            SelectedOption = 1;
            
        }
        // This button is to generate all the permutations so all the comboboxes are hidden
        private void radioButton2_CheckedChanged(object sender, EventArgs e)
        {
            comboBox1.Show();
            comboBox2.Hide();
            comboBox3.Hide();
            SelectedOption = 2;
            SelectedChar = (char)comboBox1.SelectedItem;

        }
        // This hides the other comboboxes and shows the one needed. Same code below aswell for different button
        private void radioButton3_CheckedChanged(object sender, EventArgs e)
        {
            comboBox2.Show();
            comboBox1.Hide();
            comboBox3.Hide();
            SelectedOption = 3;
            SelectedChar = (char)comboBox2.SelectedItem;


        }

        private void radioButton4_CheckedChanged(object sender, EventArgs e)
        {
            comboBox3.Show();
            comboBox1.Hide();
            comboBox2.Hide();
            SelectedOption = 4;
            SelectedChar = (char)comboBox3.SelectedItem;


        }
        private void comboBox2_SelectedIndexChanged(object sender, EventArgs e)
        {
            SelectedChar = (char)comboBox2.SelectedItem;

        }
        
        private void comboBox3_SelectedIndexChanged(object sender, EventArgs e)
        {
            SelectedChar = (char)comboBox3.SelectedItem;

        }

        private void button1_Click(object sender, EventArgs e)
        {

            if (string.IsNullOrEmpty(textBox1.Text))
            {
                MessageBox.Show("Enter some characters first!");
                //When it is empty, a pop up window pops us telling you to enter some characters
            }
            else
            {
                if (SelectedOption == 0)
                {
                    MessageBox.Show("Choose an option now!");
                    //When an option isn't selected, a pop up windows tells you to choose an option
                }

                if (SelectedOption == 1)
                {
                    label4.Text = "";
                    listView1.Items.Clear();


                    foreach(var outputword in outputwords)
                    {
                        label4.Text = label4.Text + outputword.Item1.ToString() + " - " + outputword.Item2 + "\n";
                        // Unconditionally it prints it because all it prints is everything, not a certain thing
                        string[] wordrow = new string[2];
                        ListViewItem lvitm;

                        wordrow[0] = outputword.Item1.ToString();
                        wordrow[1] = outputword.Item2;
                        lvitm = new ListViewItem(wordrow);
                        listView1.Items.Add(lvitm);
                    }
                    label7.Text = outputList.Count.ToString();

                }
                if (SelectedOption == 2)
                {
                    label4.Text = "";
                    listView1.Items.Clear();
                    int numwords = 0;
                    foreach (var outputword in outputwords)
                    {
                        if (outputword.Item2.First() == SelectedChar )
                        {
                            label4.Text = label4.Text + outputword.Item1.ToString() + " - " + outputword.Item2 + "\n";
                            //This prints the words that start with the selected letter
                            numwords++;

                            string[] wordrow = new string[2];
                            ListViewItem lvitm;

                            wordrow[0] = outputword.Item1.ToString();
                            wordrow[1] = outputword.Item2;
                            lvitm = new ListViewItem(wordrow);
                            listView1.Items.Add(lvitm);

                        }
                    }
                    label7.Text = numwords.ToString();

                }

                if (SelectedOption == 3)
                {
                    label4.Text = "";
                    listView1.Items.Clear();
                    int numwords = 0;
                    foreach (var outputword in outputwords)
                    {
                        if (outputword.Item2.Last() == SelectedChar)
                        {
                            label4.Text = label4.Text + outputword.Item1.ToString() + " - " + outputword.Item2 + "\n";
                            //This prints the words that end with the selected letter
                            numwords++;

                            string[] wordrow = new string[2];
                            ListViewItem lvitm;

                            wordrow[0] = outputword.Item1.ToString();
                            wordrow[1] = outputword.Item2;
                            lvitm = new ListViewItem(wordrow);
                            listView1.Items.Add(lvitm);

                        }
                    }
                    label7.Text = numwords.ToString();

                }


                if (SelectedOption == 4)
                {
                    label4.Text = "";
                    listView1.Items.Clear();
                    int numwords = 0;
                    foreach (var outputword in outputwords)
                    {
                        if ( (outputword.Item2.Last() != SelectedChar) & 
                             (outputword.Item2.First() != SelectedChar) &
                             (outputword.Item2.Contains(SelectedChar.ToString()))
                            )
                        {
                            label4.Text = label4.Text + outputword.Item1.ToString() + " - " + outputword.Item2 + "\n";
                            //This prints the word that don't start or end with the selected letter but is in the input (for example in the middle)
                            numwords++;

                            string[] wordrow = new string[2];
                            ListViewItem lvitm;

                            wordrow[0] = outputword.Item1.ToString();
                            wordrow[1] = outputword.Item2;
                            lvitm = new ListViewItem(wordrow);
                            listView1.Items.Add(lvitm);

                        }
                    }
                    label7.Text = numwords.ToString();

                }


            }
        }

        private void textBox1_Leave(object sender, EventArgs e)
        {
            
           label4.Text = "";
            listView1.Items.Clear();
            outputList = new HashSet<string>();
           GeneratePermutations(textBox1.Text);
           outputwords.Sort((a, b) => a.Item1.CompareTo(b.Item1)); //sort based on the integer element
           // When you leave the textbox, for example, pressing tab, it stores the output (the permutations)
        }

        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            var selectedword = listView1.SelectedItems.ToString();
            label8.Text = selectedword; 
        }

        private void listView1_SelectedIndexChanged(object sender, EventArgs e)
        {

        }


























        //public void permSubStr(String s, String pre)
        //{

        //if (Dictwords.Contains(pre.ToUpperInvariant()))
        //{
        //    if (!outputList.Contains(pre.ToUpperInvariant()))
        //    {
        //        label4.Text = Convert.ToString(pre.Length) + " letter word: " + label4.Text + pre + Environment.NewLine;
        //    }
        //    outputList.Add(pre);

        //}



        //if (s.Length != 0)
        //{

        //    for (int i = 0; i < s.Length; i++)
        //        permSubStr(s.Substring(0, i) + s.Substring(i + 1), pre + s.Substring(i, 1));
        //}
        //}

        // ^^ That code is the second code but it is unarranged
    }
}